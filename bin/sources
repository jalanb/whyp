#! /usr/bin/env python3
"""Show the text behind the type

This script is intended to replace the standard type command
It should look for commands in aliases, bash functions, and the bash $PATH
It assumes aliases and functions have been written to files before starting
    (because this script cannot reliably get them from sub-shells)
"""

import os
import sys
import argparse

from whyp import sources
from whyp import arguments


def add_args():
    """Look for options from user on the command line for this script"""
    parser = arguments.parser(__doc__)
    pa = parser.add_argument
    pa('--sources', help='Try to source these', nargs='*')
    pa('--files', action='store_true', help='Show files in those')
    pa('--any', action='store_true', help='Any files sourced')
    pa('--all', action='store_true', help='All files sourced')
    pa('--clear', action='store_true', help='Forget all sources')
    pa('--found', action='store', help='Whether that was sourced')
    pa('-o', '--optional', action='store_true', help='sources may be empty')


def parse_args():
    args = arguments.parse_args()
    if args.clear:
        sources.clear()
        sys.exit(os.EX_OK)
    if args.any:
        result = os.EX_OK if sources.any() else 1
        sys.exit(result)
    return args


def main():
    """Run the program"""
    add_args()
    args = parse_args()
    files = []
    errors = []
    loaded = sources.load(args.optional)
    if args.found:
        return args.found in loaded
    if args.sources:
        loaded = args.sources
    files = [_ for _ in loaded if os.path.isfile(_)]
    errors = [_ for _ in loaded if _ not in files]
    words = []
    if args.files:
        words = files
    elif args.all:
        words = sources.all()
    stream = sys.stdout
    if not args.optional:
        if errors:
            words, stream = errors, sys.stderr
        if not files and args.files:
            words, stream = ('No', 'files', 'sourced'), sys.stderr
    stream.write(' '.join(words))
    return stream != sys.stderr


if __name__ == '__main__':
    sys.exit(os.EX_OK if main() else not os.EX_OK)
